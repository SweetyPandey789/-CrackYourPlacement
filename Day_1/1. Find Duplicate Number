1.Find Duplicate Number

Brute Force Approach

```java
public int findDuplicate(int[] nums) {
    Arrays.sort(nums);
for(int i=0;i<nums.length-1;i++)
{
    if(nums[i]==nums[i+1])
        return nums[i];
}
    return 0;
}

```

2.Two Pointer Approach

```java
    public int findDuplicate(int[] nums) {
    if(nums.length > 1){
int slow= nums[0];
int fast = nums[nums[0]];
while(slow != fast){
slow = nums[slow];
fast = nums[nums[fast]];
}
fast = 0;
while(fast != slow){
fast = nums[fast];
slow = nums[slow];
}
return slow;
}
return -1; 
```

3.Using Hashset

```java
 public int findDuplicate(int[] nums) {
        HashSet<Integer> set = new HashSet<>();
        for(int x : nums){
            if(set.contains(x)){
                return x;
            }
            set.add(x);
        }
        return 0;
    }
```
