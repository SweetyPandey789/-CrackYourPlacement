Snakes and ladder
public int snakesAndLadders(int[][] board) {
        int n = board.length;
        Set<Integer> visited = new HashSet<>();
        
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(new int[]{1, 0});  // Start from position 1 with 0 moves
        
        while (!queue.isEmpty()) {
            int[] current = queue.poll();
            int pos = current[0];
            int moves = current[1];
            
            for (int i = 1; i <= 6; i++) {
                int newPos = pos + i;
                if (newPos > n * n) break;
                int[] coordinates = getPos(newPos, n);
                int r = coordinates[0];
                int c = coordinates[1];
                
                if (board[r][c] != -1) newPos = board[r][c];
                if (newPos == n * n) return moves + 1;
                
                if (!visited.contains(newPos)) {
                    visited.add(newPos);
                    queue.offer(new int[]{newPos, moves + 1});
                }
            }
        }
        return -1;
    }
    private int[] getPos(int pos, int n) {
        int row = (pos - 1) / n;
        int col = (pos - 1) % n;
        if (row % 2 == 1) col = n - 1 - col;
        row = n - 1 - row;
        return new int[]{row, col};
    }
