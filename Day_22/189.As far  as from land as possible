As far as land from impossible
 public int maxDistance(int[][] arr) {
    Queue<int[]> q=new LinkedList<>();
    for(int i=0;i<arr.length;i++)
    {
        for(int j=0;j<arr.length;j++)
        {
            if(arr[i][j]==1)
            {
                int idx[]=new int[2];
                idx[0]=i;
                idx[1]=j;
                q.offer(idx);
            }
        }
    }
    if(q.size()==0||q.size()==arr.length*arr.length)
    return -1;
    int level=0;
    while(!q.isEmpty())
    {
        int n=q.size();
        for(int i=0;i<n;i++)
        {
            int idx[]=q.poll();
            int x=idx[0];
            int y=idx[1];
            // top
            if(x-1>-1)
            {
                if(arr[x-1][y]==0)
                {
                    int idx2[]=new int[2];
                    idx2[0]=x-1;
                    idx2[1]=y;
                    q.offer(idx2);
                    arr[x-1][y]=1;
                }
            }
            // bottom
             if(x+1<arr.length)
            {
                if(arr[x+1][y]==0)
                {
                    int idx2[]=new int[2];
                    idx2[0]=x+1;
                    idx2[1]=y;
                    q.offer(idx2);
                    arr[x+1][y]=1;
                }
            }
            //left
             if(y-1>-1)
            {
                if(arr[x][y-1]==0)
                {
                    int idx2[]=new int[2];
                    idx2[0]=x;
                    idx2[1]=y-1;
                    q.offer(idx2);
                    arr[x][y-1]=1;
                }
            }
            //right
             if(y+1<arr.length)
            {
                if(arr[x][y+1]==0)
                {
                    int idx2[]=new int[2];
                    idx2[0]=x;
                    idx2[1]=y+1;
                    q.offer(idx2);
                    arr[x][y+1]=1;
                }
            }

        }
        level++;
    }

    return level-1;
    }
