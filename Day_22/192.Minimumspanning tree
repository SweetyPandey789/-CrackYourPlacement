Minimum spanning tree
   static class Pair 
     {
        int node;
        int weight;

        Pair(int node, int weight) 
        {
            this.node = node;
            this.weight = weight;
        }
    }
    static int spanningTree(int V, int E, List<List<int[]>> adj) {
        // Code Here.
        boolean[] visited = new boolean[V];
        PriorityQueue<Pair> minHeap = new PriorityQueue<>(Comparator.comparingInt(p -> p.weight));
        
        // Start from node 0
        minHeap.offer(new Pair(0, 0));
        int totalWeight = 0;

        while (!minHeap.isEmpty()) {
            Pair current = minHeap.poll();
            int node = current.node;
            int weight = current.weight;

            // If the node is already visited, continue
            if (visited[node]) continue;

            // Mark this node as visited
            visited[node] = true;

            // Add the weight to the total weight of MST
            totalWeight += weight;

            // Explore all the adjacent vertices
            for (int[] neighbor : adj.get(node)) {
                int adjacentNode = neighbor[0];
                int edgeWeight = neighbor[1];
                if (!visited[adjacentNode]) {
                    minHeap.offer(new Pair(adjacentNode, edgeWeight));
                }
            }
        }
        return totalWeight;
        
